
.decl MetricTypeA(
benchmark_program:symbol,
data_type:symbol,
split_size:number,
join_type:symbol,
kafka_mode:symbol,
evaluation_algorithm:symbol,
undefined_todo:symbol,
dataset_name:symbol,
thread_size:number,
unique_id:number,
metric_name:symbol,
metric_value:number
)

.input MetricTypeA(delimiter=",")

.decl MetricTypeB(
benchmark_program:symbol,
data_type:symbol,
split_size:number,
join_type:symbol,
kafka_mode:symbol,
evaluation_algorithm:symbol,
undefined_todo:symbol,
dataset_name:symbol,
thread_size:number,
unique_id:number,
metric_name:symbol,
metric_key:symbol,
metric_value:number
)

.input MetricTypeB(delimiter=",")

.decl Prefix(
unique_id:number,
benchmark_program:symbol,
data_type:symbol,
split_size:number,
join_type:symbol,
kafka_mode:symbol,
evaluation_algorithm:symbol,
dataset_name:symbol,
thread_size:number
)

Prefix(ui,bp,dt,ss,jt,km,ea,dn,ts) :-
MetricTypeA(bp,dt,ss,jt,km,ea,_,dn,ts,ui,_,_);
MetricTypeB(bp,dt,ss,jt,km,ea,_,dn,ts,ui,_,_,_).

.decl BenchmarkProgram(
unique_id:number,
benchmark_program:symbol
)

BenchmarkProgram(ui,bp) :-
Prefix(ui,bp,_,_,_,_,_,_,_).

.decl DataType(
unique_id:number,
data_type:symbol
)

DataType(ui,dt) :-
Prefix(ui,_,dt,_,_,_,_,_,_).

.decl SplitSize(
unique_id:number,
split_size:number
)

SplitSize(ui,ss) :-
Prefix(ui,_,_,ss,_,_,_,_,_).

.decl JoinType(
unique_id:number,
join_type:symbol
)

JoinType(ui,jt) :-
Prefix(ui,_,_,_,jt,_,_,_,_).

.decl KafkaMode(
unique_id:number,
kafka_mode:symbol
)

KafkaMode(ui,km) :-
Prefix(ui,_,_,_,_,km,_,_,_).

.decl EvaluationAlgorithm(
unique_id:number,
evaluation_algorithm:symbol
)

EvaluationAlgorithm(ui,ea) :-
Prefix(ui,_,_,_,_,_,ea,_,_).

.decl DatasetName(
unique_id:number,
dataset_name:symbol
)

DatasetName(ui,dn) :-
Prefix(ui,_,_,_,_,_,_,dn,_).

.decl ThreadSize(
unique_id:number,
thread_size:number
)

ThreadSize(ui,ts) :-
Prefix(ui,_,_,_,_,_,_,_,ts).

.decl SuffixTypeA(
unique_id:number,
metric_name:symbol,
metric_value:number
)

SuffixTypeA(ui,mn,mv) :-
MetricTypeA(_,_,_,_,_,_,_,_,_,ui,mn,mv).

.decl SuffixTypeB(
unique_id:number,
metric_name:symbol,
metric_key:symbol,
metric_value:number
)

SuffixTypeB(ui,mn,mk,mv) :-
MetricTypeB(_,_,_,_,_,_,_,_,_,ui,mn,mk,mv).

.decl CommunicationTime(
unique_id:number,
stratum_index:symbol,
runtime_value:number
)

CommunicationTime(ui,si,rv) :-
SuffixTypeB(ui,"communicationTime",si,rv).

.decl ComputationTime(
unique_id:number,
stratum_index:symbol,
runtime_value:number
)

ComputationTime(ui,si,rv) :-
SuffixTypeB(ui,"computationTime",si,rv).

.decl RunTime(
unique_id:number,
stratum_index:symbol,
runtime_value:number
)

RunTime(ui,si,rv) :-
SuffixTypeB(ui,"runTime",si,rv).

.decl InputSize(
unique_id:number,
tuple_count:number
)

InputSize(ui,tc) :-
SuffixTypeA(ui,"inputSize",tc).

.decl OutputSize(
unique_id:number,
tuple_count:number
)

OutputSize(ui,tc) :-
SuffixTypeA(ui,"outputSize",tc).

.decl StringBytesProduced(
unique_id:number,
stratum_index:symbol,
byte_count:number
)

StringBytesProduced(ui,si,bc) :-
SuffixTypeB(ui,"stringBytesProduced",si,bc).

.decl RelationTermsProduced(
unique_id:number,
relation_name:symbol,
tuple_count:number
)

RelationTermsProduced(ui,rn,tc) :-
SuffixTypeB(ui,"relationTermsProduced",rn,tc).

.decl OneKafka(unique_id:number)

OneKafka(ui) :-
    KafkaMode(ui, "one-kafka").

.decl ManyKafka(unique_id:number)

ManyKafka(ui) :-
    KafkaMode(ui, "many-kafka").

.decl SomeKafka(unique_id:number)

SomeKafka(ui) :-
    OneKafka(ui).

SomeKafka(ui) :-
    ManyKafka(ui).

.decl TotalCommunicationTime(unique_id:number,communication_time:number)

TotalCommunicationTime(ui,ct) :-
ManyKafka(ui),
ct = sum x : { CommunicationTime(ui,si,x), si != "none" }.

TotalCommunicationTime(ui,0) :-
!ManyKafka(ui),
KafkaMode(ui,_).

.decl TotalRunTime(unique_id:number,run_time:number)

TotalRunTime(ui,rt) :-
ManyKafka(ui),
rt = sum x : { RunTime(ui,si,x), si != "none" }.

TotalRunTime(ui,0) :-
!ManyKafka(ui),
KafkaMode(ui,_).

.decl TotalComputationTime(unique_id:number,computation_time:number)

TotalComputationTime(ui,ct) :-
TotalRunTime(ui,rt),
TotalCommunicationTime(ui,ct1),
ct = rt - ct1.

.decl TotalRelationTermsProduced(unique_id:number,tuple_count:number)

TotalRelationTermsProduced(ui,tc) :-
SomeKafka(ui),
tc = sum x : { RelationTermsProduced(ui,_,x) }.

TotalRelationTermsProduced(ui,0) :-
!SomeKafka(ui),
KafkaMode(ui,_).

.decl TotalStringBytesProduced(unique_id:number,string_bytes:number)

TotalStringBytesProduced(ui,tc) :-
SomeKafka(ui),
tc = sum x : { StringBytesProduced(ui,_,x) }.

TotalStringBytesProduced(ui,0) :-
!SomeKafka(ui),
KafkaMode(ui,_).

.decl Results1(
unique_id:number,
benchmark_program:symbol,
data_type:symbol,
split_size:number,
join_type:symbol,
kafka_mode:symbol,
evaluation_algorithm:symbol,
dataset_name:symbol,
thread_size:number,
input_size:number,
output_size:number,
run_time:number,
communication_time:number,
computation_time:number,
tuple_count:number,
string_bytes:number
)

.output Results1(delimiter=",",headers=true)

Results1(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb) :-
//bp = "NR",
//substr(dn, 0, strlen("half-complete-graph-")) = "half-complete-graph-",
Prefix(ui,bp,dt,ss,jt,km,ea,dn,ts),
InputSize(ui,is),
OutputSize(ui,os),
RunTime(ui,"none",rt),
TotalCommunicationTime(ui,ct1),
TotalComputationTime(ui,ct2),
TotalRelationTermsProduced(ui,tc),
TotalStringBytesProduced(ui,sb).

.comp ResultsFilter {

.decl InputResults(
unique_id:number,
benchmark_program:symbol,
data_type:symbol,
split_size:number,
join_type:symbol,
kafka_mode:symbol,
evaluation_algorithm:symbol,
dataset_name:symbol,
thread_size:number,
input_size:number,
output_size:number,
run_time:number,
communication_time:number,
computation_time:number,
tuple_count:number,
string_bytes:number
)

.decl OutputResults(
unique_id:number,
benchmark_program:symbol,
data_type:symbol,
split_size:number,
join_type:symbol,
kafka_mode:symbol,
evaluation_algorithm:symbol,
dataset_name:symbol,
thread_size:number,
input_size:number,
output_size:number,
run_time:number,
communication_time:number,
computation_time:number,
tuple_count:number,
string_bytes:number
)

.decl Filter(
benchmark_program:symbol,
data_type:symbol,
split_size:number,
join_type:symbol,
kafka_mode:symbol,
evaluation_algorithm:symbol,
dataset_name:symbol,
thread_size:number
)

OutputResults(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb) :-
  Filter(bp,dt,ss,jt,km,ea,dn,ts),
  InputResults(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb).

}

.init results_3 = ResultsFilter

results_3.InputResults(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb) :- 
    Results1(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb).

.output results_3.OutputResults(delimiter=",",headers=true)

results_3.Filter("NR","number",0,"none","no-kafka","SNE","half-complete-graph-64",1).
results_3.Filter("NR","number",0,"none","no-kafka","SNE","half-complete-graph-128",2).
results_3.Filter("NR","number",0,"none","no-kafka","SNE","half-complete-graph-256",4).
results_3.Filter("NR","number",0,"none","no-kafka","SNE","half-complete-graph-512",8).
results_3.Filter("NR","number",0,"none","no-kafka","SNE","half-complete-graph-1024",16).
results_3.Filter("NR","number",0,"none","no-kafka","SNE","half-complete-graph-2048",32).

results_3.Filter("NR","number",1,"complete","one-kafka","GPCSNE","half-complete-graph-64",1).
results_3.Filter("NR","number",2,"complete","one-kafka","GPCSNE","half-complete-graph-128",1).
results_3.Filter("NR","number",4,"complete","one-kafka","GPCSNE","half-complete-graph-256",1).
results_3.Filter("NR","number",8,"complete","one-kafka","GPCSNE","half-complete-graph-512",1).
results_3.Filter("NR","number",16,"complete","one-kafka","GPCSNE","half-complete-graph-1024",1).
results_3.Filter("NR","number",32,"complete","one-kafka","GPCSNE","half-complete-graph-2048",1).

results_3.Filter("NR","number",1,"complete","many-kafka","GPCSNE","half-complete-graph-64",1).
results_3.Filter("NR","number",2,"complete","many-kafka","GPCSNE","half-complete-graph-128",1).
results_3.Filter("NR","number",4,"complete","many-kafka","GPCSNE","half-complete-graph-256",1).
results_3.Filter("NR","number",8,"complete","many-kafka","GPCSNE","half-complete-graph-512",1).
results_3.Filter("NR","number",16,"complete","many-kafka","GPCSNE","half-complete-graph-1024",1).
results_3.Filter("NR","number",32,"complete","many-kafka","GPCSNE","half-complete-graph-2048",1).

results_3.Filter("NR","symbol",0,"none","no-kafka","SNE","half-complete-graph-64",1).
results_3.Filter("NR","symbol",0,"none","no-kafka","SNE","half-complete-graph-128",2).
results_3.Filter("NR","symbol",0,"none","no-kafka","SNE","half-complete-graph-256",4).
results_3.Filter("NR","symbol",0,"none","no-kafka","SNE","half-complete-graph-512",8).
results_3.Filter("NR","symbol",0,"none","no-kafka","SNE","half-complete-graph-1024",16).
results_3.Filter("NR","symbol",0,"none","no-kafka","SNE","half-complete-graph-2048",32).

results_3.Filter("NR","symbol",1,"complete","one-kafka","GPCSNE","half-complete-graph-64",1).
results_3.Filter("NR","symbol",2,"complete","one-kafka","GPCSNE","half-complete-graph-128",1).
results_3.Filter("NR","symbol",4,"complete","one-kafka","GPCSNE","half-complete-graph-256",1).
results_3.Filter("NR","symbol",8,"complete","one-kafka","GPCSNE","half-complete-graph-512",1).
results_3.Filter("NR","symbol",16,"complete","one-kafka","GPCSNE","half-complete-graph-1024",1).
results_3.Filter("NR","symbol",32,"complete","one-kafka","GPCSNE","half-complete-graph-2048",1).

results_3.Filter("NR","symbol",1,"complete","many-kafka","GPCSNE","half-complete-graph-64",1).
results_3.Filter("NR","symbol",2,"complete","many-kafka","GPCSNE","half-complete-graph-128",1).
results_3.Filter("NR","symbol",4,"complete","many-kafka","GPCSNE","half-complete-graph-256",1).
results_3.Filter("NR","symbol",8,"complete","many-kafka","GPCSNE","half-complete-graph-512",1).
results_3.Filter("NR","symbol",16,"complete","many-kafka","GPCSNE","half-complete-graph-1024",1).
results_3.Filter("NR","symbol",32,"complete","many-kafka","GPCSNE","half-complete-graph-2048",1).

.init results_4 = ResultsFilter

results_4.InputResults(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb) :- 
    Results1(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb).

.output results_4.OutputResults(delimiter=",",headers=true)

results_4.Filter("NR","number",2,"complete","no-kafka","SNE","half-complete-graph-2048",2).
results_4.Filter("NR","number",2,"complete","no-kafka","SNE","half-complete-graph-2048",4).
results_4.Filter("NR","number",2,"complete","no-kafka","SNE","half-complete-graph-2048",8).

results_4.Filter("NR","number",4,"complete","no-kafka","SNE","half-complete-graph-2048",2).
results_4.Filter("NR","number",4,"complete","no-kafka","SNE","half-complete-graph-2048",4).
results_4.Filter("NR","number",4,"complete","no-kafka","SNE","half-complete-graph-2048",8).

results_4.Filter("NR","number",8,"complete","no-kafka","SNE","half-complete-graph-2048",2).
results_4.Filter("NR","number",8,"complete","no-kafka","SNE","half-complete-graph-2048",4).
results_4.Filter("NR","number",8,"complete","no-kafka","SNE","half-complete-graph-2048",8).

results_4.Filter("NR","number",2,"complete","many-kafka","GPCSNE","half-complete-graph-2048",2).
results_4.Filter("NR","number",2,"complete","many-kafka","GPCSNE","half-complete-graph-2048",4).
results_4.Filter("NR","number",2,"complete","many-kafka","GPCSNE","half-complete-graph-2048",8).

results_4.Filter("NR","number",4,"complete","many-kafka","GPCSNE","half-complete-graph-2048",2).
results_4.Filter("NR","number",4,"complete","many-kafka","GPCSNE","half-complete-graph-2048",4).
results_4.Filter("NR","number",4,"complete","many-kafka","GPCSNE","half-complete-graph-2048",8).

results_4.Filter("NR","number",8,"complete","many-kafka","GPCSNE","half-complete-graph-2048",2).
results_4.Filter("NR","number",8,"complete","many-kafka","GPCSNE","half-complete-graph-2048",4).
results_4.Filter("NR","number",8,"complete","many-kafka","GPCSNE","half-complete-graph-2048",8).

results_4.Filter("NR","symbol",2,"complete","no-kafka","SNE","half-complete-graph-2048",2).
results_4.Filter("NR","symbol",2,"complete","no-kafka","SNE","half-complete-graph-2048",4).
results_4.Filter("NR","symbol",2,"complete","no-kafka","SNE","half-complete-graph-2048",8).

results_4.Filter("NR","symbol",4,"complete","no-kafka","SNE","half-complete-graph-2048",2).
results_4.Filter("NR","symbol",4,"complete","no-kafka","SNE","half-complete-graph-2048",4).
results_4.Filter("NR","symbol",4,"complete","no-kafka","SNE","half-complete-graph-2048",8).

results_4.Filter("NR","symbol",8,"complete","no-kafka","SNE","half-complete-graph-2048",2).
results_4.Filter("NR","symbol",8,"complete","no-kafka","SNE","half-complete-graph-2048",4).
results_4.Filter("NR","symbol",8,"complete","no-kafka","SNE","half-complete-graph-2048",8).

results_4.Filter("NR","symbol",2,"complete","many-kafka","GPCSNE","half-complete-graph-2048",2).
results_4.Filter("NR","symbol",2,"complete","many-kafka","GPCSNE","half-complete-graph-2048",4).
results_4.Filter("NR","symbol",2,"complete","many-kafka","GPCSNE","half-complete-graph-2048",8).

results_4.Filter("NR","symbol",4,"complete","many-kafka","GPCSNE","half-complete-graph-2048",2).
results_4.Filter("NR","symbol",4,"complete","many-kafka","GPCSNE","half-complete-graph-2048",4).
results_4.Filter("NR","symbol",4,"complete","many-kafka","GPCSNE","half-complete-graph-2048",8).

results_4.Filter("NR","symbol",8,"complete","many-kafka","GPCSNE","half-complete-graph-2048",2).
results_4.Filter("NR","symbol",8,"complete","many-kafka","GPCSNE","half-complete-graph-2048",4).
results_4.Filter("NR","symbol",8,"complete","many-kafka","GPCSNE","half-complete-graph-2048",8).

.init results_5 = ResultsFilter

results_5.InputResults(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb) :- 
    Results1(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,rt,ct1,ct2,tc,sb).

.output results_5.OutputResults(delimiter=",",headers=true)

.decl Results5Dn(dataset_name:symbol)

Results5Dn("cit-HepTh").
Results5Dn("com-Amazon").
Results5Dn("ego-Facebook").
Results5Dn("email-Enron").
Results5Dn("wiki-Vote").
Results5Dn("half-complete-graph-2048").

results_5.Filter("ALL","number",0,"none","many-kafka","GPCSNE",dn,16) :- Results5Dn(dn).
results_5.Filter("NR","number",2,"complete","many-kafka","GPCSNE",dn,16) :- Results5Dn(dn).
results_5.Filter("ALL","number",0,"none","no-kafka","SNE",dn,16) :- Results5Dn(dn).
results_5.Filter("NR","number",2,"complete","no-kafka","SNE",dn,16) :- Results5Dn(dn).

results_5.Filter("ALL","symbol",0,"none","many-kafka","GPCSNE",dn,16) :- Results5Dn(dn).
results_5.Filter("NR","symbol",2,"complete","many-kafka","GPCSNE",dn,16) :- Results5Dn(dn).
results_5.Filter("ALL","symbol",0,"none","no-kafka","SNE",dn,16) :- Results5Dn(dn).
results_5.Filter("NR","symbol",2,"complete","no-kafka","SNE",dn,16) :- Results5Dn(dn).

.decl ValidStratumIndexForMax(unique_id:number,stratum_index:symbol)

ValidStratumIndexForMax(ui,si) :-
    KafkaMode(ui,"many-kafka"),
    RunTime(ui,si,_),
    CommunicationTime(ui,si,_),
    ComputationTime(ui,si,_),
    si != "none".

.decl ValidRelationNameForMax(unique_id:number,relation_name:symbol)

ValidRelationNameForMax(ui,rn) :-
    SomeKafka(ui),
    RelationTermsProduced(ui,rn,_),
    rn != "I",
    rn != "E".

.decl MaxProductiveRelation(unique_id:number,relation_name:symbol,term_count:number)

MaxProductiveRelation(ui,rn,tc) :-
tc = max x : { RelationTermsProduced(ui,y,x), ValidRelationNameForMax(ui,y) },
RelationTermsProduced(ui,rn,tc).

.decl MaxProductiveRelationCount(unique_id:number,relation_count:number,term_count:number)

MaxProductiveRelationCount(ui,rc,tc) :-
MaxProductiveRelation(ui,_,tc),
rc = count : MaxProductiveRelation(ui,_,_).

.decl MaxRunTimeStratum(unique_id:number,stratum_index:symbol,run_time:number)

MaxRunTimeStratum(ui,si,rt) :-
rt = max x : { RunTime(ui,y,x), ValidStratumIndexForMax(ui,y) },
RunTime(ui,si,rt).

.decl MaxCommunicationTimeStratum(unique_id:number,stratum_index:symbol,communication_time:number)

MaxCommunicationTimeStratum(ui,si,ct) :-
ct = max x : { CommunicationTime(ui,y,x), ValidStratumIndexForMax(ui,y) },
CommunicationTime(ui,si,ct).

.decl MaxComputationTimeStratum(unique_id:number,stratum_index:symbol,computation_time:number)

MaxComputationTimeStratum(ui,si,ct) :-
ct = max x : { ComputationTime(ui,y,x), ValidStratumIndexForMax(ui,y) },
ComputationTime(ui,si,ct).

.decl Results2(
unique_id:number,
benchmark_program:symbol,
data_type:symbol,
split_size:number,
join_type:symbol,
kafka_mode:symbol,
evaluation_algorithm:symbol,
dataset_name:symbol,
thread_size:number,
input_size:number,
output_size:number,
max_productive_relation_count_key:number,
max_productive_relation_count_value:number,
max_run_time_stratum_key:symbol,
max_run_time_stratum_value:number,
max_communication_time_stratum_key:symbol,
max_communication_time_stratum_value:number,
max_computation_time_stratum_key:symbol,
max_computation_time_stratum_value:number
)

.output Results2(delimiter=",",headers=true)

Results2(ui,bp,dt,ss,jt,km,ea,dn,ts,is,os,mprck,mprcv,mrtsk,mrtsv,mcts1k,mcts1v,mcts2k,mcts2v) :-
//bp = "NR",
//substr(dn, 0, strlen("half-complete-graph-")) = "half-complete-graph-",
Prefix(ui,bp,dt,ss,jt,km,ea,dn,ts),
InputSize(ui,is),
OutputSize(ui,os),
MaxProductiveRelationCount(ui,mprck,mprcv),
MaxRunTimeStratum(ui,mrtsk,mrtsv),
MaxCommunicationTimeStratum(ui,mcts1k,mcts1v),
MaxComputationTimeStratum(ui,mcts2k,mcts2v).

// @TODO: do ./kafka/script-to-generate-results.sh ~/Downloads/metrics_13-11-2020.csv ~/Downloads/
// @TODO: remove outputs below, for debugging, ALL in InputSize but not OutputSize, hence no output generated, retry
.output InputSize
.output OutputSize
/*
.decl BenchmarkProgram(benchmark_program:symbol)

BenchmarkProgram("ALL").
BenchmarkProgram("NR").

.decl DataType(data_type:symbol)

DataType("number").
DataType("symbol").

.decl DataType(data_type:symbol)

DataType("number").
DataType("symbol").

.decl SplitSize(split_size:number)

SplitSize(0).
SplitSize(1).
SplitSize(2).
SplitSize(4).
SplitSize(8).
SplitSize(16).
SplitSize(32).

.decl JoinType(join_type:symbol)

JoinType("none").
JoinType("complete").

.decl KafkaMode(kafka_mode:symbol)

KafkaMode("no-kafka").
KafkaMode("one-kafka").
KafkaMode("many-kafka").

.decl EvaluationAlgorithm(evaluation_algorithm:symbol)

EvaluationAlgorithm("SNE").
EvaluationAlgorithm("GPCSNE").

.decl DatasetName(dataset_name:symbol)

DatasetName("half-complete-graph-64").
DatasetName("half-complete-graph-128").
DatasetName("half-complete-graph-512").
DatasetName("half-complete-graph-1024").
DatasetName("half-complete-graph-2048").
DatasetName("cit-HepTh").
DatasetName("com-Amazon").
DatasetName("ego-Facebook").
DatasetName("email-Enron").
DatasetName("wiki-Vote").

.decl ThreadSize(thread_size:number)

ThreadSize(1).
ThreadSize(2).
ThreadSize(4).
ThreadSize(8).
ThreadSize(16).
ThreadSize(32).
ThreadSize(64).
*/
