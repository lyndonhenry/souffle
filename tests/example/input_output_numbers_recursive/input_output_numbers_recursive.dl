// Souffle - A Datalog Compiler
// Copyright (c) 2018, The Souffle Developers. All rights reserved
// Licensed under the Universal Permissive License v 1.0 as shown at:
// - https://opensource.org/licenses/UPL
// - <souffle root>/licenses/SOUFFLE-UPL.txt
//
// input_output_numbers.dl
//
// Test for propagation of tuples between program strata
// under multiple input and output configurations.
//
//
// Relations are names by the following schema, with
// <x|y> denoting the exclusive or of x and y, and
// [x] denoting the optional occurrence of x.
//
// [<Receiver|Sender|Receive|Send|ReceiveSend>] [<Input|Output|InputOutput>]
//
// Sender relations propagate tuples to Receive and ReceiveSend
// relations, while Send and ReceiveSend relations propagate
// tuples to Receiver relations.
//
// Input relations are marked with .input, Output relations
// with .output, and InputOutput relations with both .input
// and .output.
//
// Note that this only tests the 'number' datatype, for a test
// of both the 'number' and 'symbol' datatypes, see
// //tests/example/input_output.
//
//

.decl Sender(x:number, y:number)
.input Sender()
Sender(x, y) :- Sender(y, x).

.decl Receiver(x:number, y:number)
.output Receiver()
Receiver(x, y) :- Receiver(y, x).

.decl Input(x:number, y:number)
.input Input()
Input(1, 2).
Input(x, y) :- Input(y, x).

.decl Output(x:number, y:number)
.output Output()
Output(1, 2).
Output(x, y) :- Output(y, x).

.decl InputOutput(x:number, y:number)
.input InputOutput()
.output InputOutput()
InputOutput(1, 2).
InputOutput(x, y) :- InputOutput(y, x).

.decl Receive(x:number, y:number)
Receive(1, 2).
Receive(x, y) :- Sender(x, y).
Receive(x, y) :- Receive(y, x).

.decl Send(x:number, y:number)
Send(1, 2).
Receiver(x, y) :- Send(x, y).
Send(x, y) :- Send(y, x).

.decl ReceiveSend(x:number, y:number)
ReceiveSend(1, 2).
ReceiveSend(x, y) :- Sender(x, y).
ReceiveSend(x, y) :- ReceiveSend(y, x).

.decl InputReceive(x:number, y:number)
.input InputReceive()
InputReceive(1, 2).
InputReceive(x, y) :- Sender(x, y).
InputReceive(x, y) :- InputReceive(y, x).

.decl OutputReceive(x:number, y:number)
.output OutputReceive()
OutputReceive(1, 2).
OutputReceive(x, y) :- Sender(x, y).
OutputReceive(x, y) :- OutputReceive(y, x).

.decl InputOutputReceive(x:number, y:number)
.input InputOutputReceive()
.output InputOutputReceive()
InputOutputReceive(1, 2).
InputOutputReceive(x, y) :- Sender(x, y).
InputOutputReceive(x, y) :- InputOutputReceive(y, x).

.decl InputSend(x:number, y:number)
.input InputSend()
InputSend(1, 2).
Receiver(x, y) :- InputSend(x, y).
InputSend(x, y) :- InputSend(y, x).

.decl OutputSend(x:number, y:number)
.output OutputSend()
OutputSend(1, 2).
Receiver(x, y) :- OutputSend(x, y).
OutputSend(x, y) :- OutputSend(y, x).

.decl InputOutputSend(x:number, y:number)
.input InputOutputSend()
.output InputOutputSend()
InputOutputSend(1, 2).
Receiver(x, y) :- InputOutputSend(x, y).
InputOutputSend(x, y) :- InputOutputSend(y, x).

.decl InputReceiveSend(x:number, y:number)
.input InputReceiveSend()
InputReceiveSend(1, 2).
InputReceiveSend(x, y) :- Sender(x, y).
Receiver(x, y) :- InputReceiveSend(x, y).
InputReceiveSend(x, y) :- InputReceiveSend(y, x).

.decl OutputReceiveSend(x:number, y:number)
.output OutputReceiveSend()
OutputReceiveSend(1, 2).
OutputReceiveSend(x, y) :- Sender(x, y).
Receiver(x, y) :- OutputReceiveSend(x, y).
OutputReceiveSend(x, y) :- OutputReceiveSend(y, x).

.decl InputOutputReceiveSend(x:number, y:number)
.input InputOutputReceiveSend()
.output InputOutputReceiveSend()
InputOutputReceiveSend(1, 2).
InputOutputReceiveSend(x, y) :- Sender(x, y).
Receiver(x, y) :- InputOutputReceiveSend(x, y).
InputOutputReceiveSend(x, y) :- InputOutputReceiveSend(y, x).
