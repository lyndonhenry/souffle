
// Topological Ordering

// Gives a topological ordering over the vertices of an input graph. Note that is works only on input graph is acyclic.

// Graph

// Edges
.decl Edge(v1:number, v2:number)
.input Edge

// Vertices
.decl Vertex(v:number) 
Vertex(v) :- Edge(v,_).
Vertex(v) :- Edge(_,v).

// Tests if vertex v1 proceeds vertex v2 in the ordering.
.decl IsBefore(v1:number, v2:number)

// Tests if vertex v1 succeeds vertex v2 in the ordering.
.decl IsAfter(v1:number, v2:number)

// Gives the possible Indices of the vertices in the ordering.
.decl Indices(v:number, i:number) 

// Gives the exact Index of the vertex in the ordering.
.decl Index(v:number, i:number) 
.output Index

// Vertex x is before vertex y if the graph has an edge from x to y.
IsBefore(x, y) :-
    edge(x, y).

// Vertex x is before vertex y if some vertex z is before x and z is before y.
IsBefore(x, y) :-
    IsBefore(x, z),
    IsBefore(z, y).

// Vertex x is after vertex y if the graph has an edge from y to x.
IsAfter(x, y) :-
    edge(y, x).

// Vertex x is after vertex y if some vertex z is after x and y is after z.
IsAfter(x, y) :-
    IsAfter(z, x),
    IsAfter(y, z).

// The Index of a vertex x is 0 if it has no inbound or outbound edges.
Indices(x, 0) :-
    vertex(x),
    !edge(_, x),
    !edge(x, _).

// The Index of a vertex x is 1 if it has no inbound but only outbound edges.
Indices(x, 1) :-
    vertex(x),
    !edge(_, x),
    edge(x, _).

// The possible Indices of a vertex x are 1 more than the Index of some vertex y if that vertex y is before x but not after x.
Indices(x, i+1) :-
    IsBefore(y, x),
    !IsBefore(x, y),
    IsAfter(x, y),
    Indices(y, i).

// The exact Index of a vertex is the maximum of its possible Indices.
Index(x, i) :-
    Indices(x, i),
    !Indices(x, i+1).

